(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{226:function(t,s,n){"use strict";n.r(s);var r=n(0),a=Object(r.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"操作系统"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[t._v("#")]),t._v(" 操作系统")]),t._v(" "),n("h2",{attrs:{id:"进程互斥"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程互斥"}},[t._v("#")]),t._v(" 进程互斥")]),t._v(" "),n("p",[t._v("操作系统中，"),n("strong",[t._v("进程")]),t._v("是资源占有的最小单位，"),n("strong",[t._v("线程")]),t._v("可以访问其所在进程内的所有资源，但线程本身不占有资源或仅占有一点点资源。\n对于某些资源来说，同一时间只能被一个进程占用，这种资源就是"),n("strong",[t._v("临界资源")]),t._v("。如打印机、硬盘内一些变量和数据等。\n对于临界资源的访问，必须是互斥进行。也就是当临界资源被占用时，另一个申请临界资源的进程会被阻塞，直到其所申请的临界资源被释放。\n而进程内访问临界资源的代码被成为"),n("strong",[t._v("临界区")]),t._v("。")])])}],!1,null,null,null);s.default=a.exports}}]);