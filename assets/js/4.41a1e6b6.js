(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{170:function(t,e,i){"use strict";i.r(e);var a=i(0),s=Object(a.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"content"},[t._m(0),t._v(" "),i("p",[t._v("之前的项目一直是使用 hbuilder 基于 HTML5 来开发 android 和 ios 应用。但是在考虑做一款个人 app 的时候，三方打包的扩展性很低\n，原生程序基本属于暗箱操作。kotlin 又是 google 官方开发语言，所以打算使用 kotlin 开发 app 的壳子，同时也方便今后的封装。")]),t._v(" "),t._m(1),t._v(" "),i("p",[t._v("可以使用两种比较流行的编辑器编辑安卓项目。")]),t._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://hadihariri.com/2014/01/06/intellij-idea-minimal-survival-guide/",target:"_blank",rel:"noopener noreferrer"}},[t._v("idea"),i("OutboundLink")],1)]),t._v(" "),i("li",[i("a",{attrs:{href:"https://developer.android.google.cn/studio/",target:"_blank",rel:"noopener noreferrer"}},[t._v("android-studio"),i("OutboundLink")],1)])]),t._v(" "),t._m(2),t._v(" "),i("p",[t._v("sdk 是 android 开发工具包，同时包含了虚拟机方便开发调试。sdk 通常是可以通过编辑器自动下载，如果下载失败，需要手动配置。我通过 android-studio\n下载了 sdk ，查看 sdk 配置信息：")]),t._v(" "),t._m(3),t._v(" "),i("p",[i("a",{attrs:{href:"https://developer.android.com/training/basics/firstapp/creating-project",target:"_blank",rel:"noopener noreferrer"}},[t._v("谷歌开发者"),i("OutboundLink")],1),t._v("推荐使用 android studio。")]),t._v(" "),t._m(4),t._v(" "),i("img",{attrs:{src:t.$withBase("/android/start-android-studio.png")}}),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),i("p",[t._v("首先需要安装 android sdk，我通过在线完成安装。点击图标"),i("img",{attrs:{src:t.$withBase("/android/sdk-btn.png")}}),t._v("，查看 sdk 。")]),t._v(" "),i("img",{attrs:{src:t.$withBase("/android/sdk-configure.png")}}),t._v(" "),i("p",[t._v("查看安装的 api 版本，然后运行。")]),t._v(" "),i("img",{attrs:{src:t.$withBase("/android/virtual.png")}}),t._v(" "),t._m(7),t._v(" "),i("p",[t._v("如果是为了快速创建项目，虚拟机会耽误很多时间，并且可能会该下载的都下载完成了，还需要更改 BIOS 虚拟机控制，比较坑。")]),t._v(" "),t._m(8),t._v(" "),i("p",[t._v("手机 usb 调试，需要开启开发者模式，允许 usb 调试，本文对此就不再赘述了。")]),t._v(" "),i("img",{attrs:{src:t.$withBase("/android/hello.jpg")}}),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),i("p",[t._v("接下来就是需要做的核心内容了，现在的思路是，在 activity 中创建 webview，通过 webview 加载服务器端（为了提速也可以放在项目中）的代码，\n显示在页面上，我整理了一下加载 webview 的步骤：")]),t._v(" "),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),i("p",[t._v("现在可以正常访问页面了，但是页面是弹出到系统自带浏览器，想要的效果是在 webview 中直接显示。")]),t._v(" "),t._m(19),t._v(" "),t._m(20),t._m(21),t._v(" "),i("img",{attrs:{src:t.$withBase("/android/local-browser.jpg")}}),t._v(" "),i("p",[t._v("优化代码警告")]),t._v(" "),t._m(22),t._m(23),t._v(" "),i("p",[t._v("首先开启自己的前端项目，确保手机和 pc 处于同一局域网，然后修改 webview 访问地址。")]),t._v(" "),i("img",{attrs:{src:t.$withBase("/android/enable-js.jpg")}})])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"安卓-app"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安卓-app","aria-hidden":"true"}},[this._v("#")]),this._v(" 安卓 APP")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"编辑器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编辑器","aria-hidden":"true"}},[this._v("#")]),this._v(" 编辑器")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"sdk"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sdk","aria-hidden":"true"}},[this._v("#")]),this._v(" sdk")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v("android sdk location should not contain whitespace,sdk 的安装目录不能包含空格。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"start-a-project"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#start-a-project","aria-hidden":"true"}},[this._v("#")]),this._v(" start a project")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("打开 ide 后会下载  gradle（一个打包工具） ，若下载失败，可以在 "),e("code",[this._v("C:\\Users\\Administrator\\.gradle\\wrapper\\dists")]),this._v(" 中手动放置。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"如何运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何运行","aria-hidden":"true"}},[this._v("#")]),this._v(" 如何运行")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("1: 使用 usb 调试，这是最方便最直接的方式。")]),this._v(" "),e("li",[this._v("2： 使用已有的虚拟机调试，这种方式需要搭建环境。")]),this._v(" "),e("li",[this._v("3：创建新的虚拟机。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"查看页面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看页面","aria-hidden":"true"}},[this._v("#")]),this._v(" 查看页面")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v("出现 Error Installing APKs，打开 file/settings/build,execution,deployment/instant run/首项\nenable 选框去掉勾选")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"创建一个-webview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建一个-webview","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建一个 webview")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"在-activity-中创建-webview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-activity-中创建-webview","aria-hidden":"true"}},[this._v("#")]),this._v(" 在 activity 中创建 webview")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('// 目前先不考虑属性设置，只考虑目标\n<WebView\n        android:id="@+id/webView1"\n        android:layout_below="@+id/text_endLoading"\n        android:layout_width="fill_parent"\n        android:layout_height="fill_parent"\n        android:layout_marginTop="10dp" />\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"将网页插入-webview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将网页插入-webview","aria-hidden":"true"}},[this._v("#")]),this._v(" 将网页插入 webview")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('// 引入 webview 对象，实例化并赋值为 activity 中的 webview，前端同学可以理解为 `findByID` 。\nimport android.webkit.WebView\nclass MainActivity : AppCompatActivity() {\n  // 定义 webview\n    private var webView: WebView? = null\n    // 默认生成，把 activity 展示出来\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        // 执行新增的初始化方法\n        init()\n    }\n    // 我新增的初始化方法\n    private fun init() {\n    // 将 webview 和 页面中的 webview 组件绑定\n        webView = findViewById(R.id.webView1)\n        // 加载链接\n        webView!!.loadUrl("http://www.baidu.com/")\n    }\n}\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v("这里的 kotlin 语法相信熟悉 typescript 的同学都能发现，语法太相近了。相信之后上手也会提高很多效率。从而也可以看出，如今的“端”实在太多，\nandroid,ios,webapp,微信小程序，pc，桌面端，快应用... 我想会有一门语言或者一个规范来限制约定 api，让多端统一更容易。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"允许网络访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#允许网络访问","aria-hidden":"true"}},[this._v("#")]),this._v(" 允许网络访问")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("此时运行项目，会发现 "),e("code",[this._v("net：：ERR_CLEARTEXT_NOT_PERMITTED")]),this._v("。从Android 9.0（API级别28）开始，默认情况下禁用明文支持。因此http的url均无法在webview中加载。\n因此需要配置访问权限。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('// 在mainfest 中加入\n<uses-permission android:name="android.permission.INTERNET"/>\n// application 中加入属性\nandroid:usesCleartextTraffic="true"\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"使用-app-内浏览器访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-app-内浏览器访问","aria-hidden":"true"}},[this._v("#")]),this._v(" 使用 app 内浏览器访问")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 在 init 中执行\n// This inspection reports calls to Java get and set methods that can be replaced with the use of Kotlin synthetic properties.\nwebView!!.setWebViewClient(webClient)\nprivate val webClient = object : WebViewClient() {\n  // 此处 shouldOverrideUrlLoading 被删除线， 不推荐重写，是否还有其他方案？\n        override fun shouldOverrideUrlLoading(view: WebView?, url: String?): Boolean {\n            return false\n        }\n    }\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),e("p",[this._v("android-studio 中 java 代码可以自动转换为 kotlin 。此处有些类似 ts 和 js 的关系，语法检查会抛出警告或异常，但是不会阻止运行，因为最终\n仍然是 java 代码运行在 java 虚拟机上。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("// 改为 kotlin 推荐的方式调用 webViewClient 的 get set 方法\nwebView!!.webViewClient = webClient\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"调试开发环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#调试开发环境","aria-hidden":"true"}},[this._v("#")]),this._v(" 调试开发环境")])}],!1,null,null,null);e.default=s.exports}}]);