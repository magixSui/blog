(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{174:function(t,e,s){"use strict";s.r(e);var i=s(0),a=Object(i.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("相对于个人开发者而言，虽然拥有自己的服务器，但是从各个方面衡量，github 仍然是首选。服务器仓库需要部署，维护，并且还存在丢失、被攻击的风险。")]),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("在百度了一下之后，决定使用 Travis ci 作为第一个自动化构建工具。接下来是注册，当然使用 github 账号，然后登陆后会看到项目列表。激活之后，\n工具会监听仓库的所有变化。")]),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("首先选中想要持续集成的项目，打开开关。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/base-on-requirement/activate-btn.png")}}),t._v(" "),s("p",[t._v("在仓库下新建 yml 文件，travis-ci 默认使用 yaml 格式作为配置文件，下面是一个 官方提供的基础最小化配置。")]),t._v(" "),t._m(3),s("p",[t._v("不过这并不能直接部署成功，现在的问题主要是四个：")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),s("p",[t._v("第二个问题也比较简单，添加语言选择：")]),t._v(" "),t._m(6),s("p",[t._v("接下来需要解决的是第三个问题，这个问题困扰了我近两个个小时，但是解决方案却是容易的。首先我在 github 上创建了个人的 access_token，\n这个 token 创建完需要保存，否则就会消失。然后在 yml 中配置 github_token,这里我的做法是将 token 粘贴进来，然后在 travis 配置\n了一个变量 GITHUB_TOKEN 。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/base-on-requirement/setting.png")}}),t._v(" "),s("p",[t._v("这样的方式导致我一直在报错：")]),t._v(" "),t._m(7),t._m(8),t._v(" "),s("p",[t._v("这样成功之后，仍然会抛出异常：")]),t._v(" "),t._m(9),s("p",[t._v("这也是我不确信 token 配置的根本原因，因为 travis 不配置用户的话会设置默认用户，这个用户对于我的项目当然是没有权限的了。在 yml 下增加配置：")]),t._v(" "),t._m(10),s("p",[t._v("根据文档，更好的方式应该是后面的配置。")]),t._v(" "),s("p",[t._v("接下来是最后的问题，项目的结构。我想要部署的是一个 vuepress 博客，他拥有自己的安装依赖，静态文件目录，并且是一个有目录层级的静态项目。travis\n默认的是 master 下就是一个静态资源项目，直接部署到 github page 上。所以部署仍会失败。travis 帮我们想到了这样的情况，他有直接的配置项来处理\n目录的问题：")]),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),s("p",[t._v("travis 帮我们执行了安装命令加载依赖，执行了脚本完成静态资源打包，当然可以加上依赖缓存，让构建更迅速。现在已经可以跑起来了。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/base-on-requirement/css-error.png")}}),t._v(" "),t._m(14),t._v(" "),s("p",[t._v("按照这个方式更改 base 。第一次并不会成功，提交第二次以后，可以发现，网站能正常访问了。这是因为执行的命令 npm run build 在代码提交完成之前执行。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"github-自动部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github-自动部署","aria-hidden":"true"}},[this._v("#")]),this._v(" github 自动部署")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"travis-ci"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#travis-ci","aria-hidden":"true"}},[this._v("#")]),this._v(" Travis ci")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#步骤","aria-hidden":"true"}},[this._v("#")]),this._v(" 步骤")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("deploy:\n  provider: pages\n  skip_cleanup: true\n  github_token: xxx  # Set in the settings page of your repository, as a secure variable\n  keep_history: true\n  on:\n    branch: master\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("通过解析")]),this._v(" "),e("li",[this._v("指定语言")]),this._v(" "),e("li",[this._v("默认配置是否符合当前的项目结构")]),this._v(" "),e("li",[this._v("权限 token")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("首先第一个问题很容易解决：\n仔细排查脚本代码，发现 deploy 缺少了 "),e("code",[this._v(":")]),this._v("，添加后可以进入到构建阶段。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("language: node_js\nnode_js:\n  - node # 代表最新稳定版\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("invalid github_token xxx 401\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这让我很疑惑，是不是 token 需要在仓库内生成或者是只需要在配置文件或是网站上配置？我进行了几次测试，不过一直是这个错误。最后，发现原因\n是 github_token 只能作为变量使用（在 github developer 文档中找到的），而需要把他存储到环境变量中，才能通过命令行访问。我又仔细看了网站，\n之前添加的就是环境变量。那么此时应该需要将 token 的值 xxx 改为环境变量 "),e("code",[this._v("$GITHUB_TOKEN")]),this._v(" 。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("invalid github_token xxx 401\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('after_script:\n  - git config user.name "${GIT_NAME}"\n  - git config user.email "${GIT_EMAIL}"\n// 或者\ndeploy\n  name: $GIT_NAME\n  email: $GIT_EMAIL\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("local-dir: ./.vuepress/dist/\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("travis 会自动将目录下的静态资源推送到默认的 gh-pages 分支上，但是现在的资源是本地上传的，现在仍需要手动执行 "),e("code",[this._v("npm run build")]),this._v("。我们的目的是\npush 后全自动的部署，这个功能 travis 也提供给我们了（真的方便啊） 。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("install:\n    - npm install\nscript:\n    - npm run build\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("可以看到 css 没有加载，并且如果点击，跳转链接失效了。在 vue-press 官网中，如果你打算发布到 "),e("code",[this._v("https://<USERNAME>.github.io/<REPO>/")]),this._v("\n（也就是说你的仓库在 "),e("code",[this._v("https://github.com/<USERNAME>/<REPO>")]),this._v("），则将 base 设置为 "),e("code",[this._v("/<REPO>/")]),this._v("。")])}],!1,null,null,null);e.default=a.exports}}]);