(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{175:function(t,s,e){"use strict";e.r(s);var a=e(0),r=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"目的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目的","aria-hidden":"true"}},[t._v("#")]),t._v(" 目的")]),t._v(" "),e("p",[t._v("在编写本博客部署到服务器时，需要反复的 push 然后在服务器 pull ，不胜其烦。所以考虑自动部署，将重复的事交给脚本去做。\n由于是个人博客，所以是以学习的目的为出发点，如果是公司项目的部署，请使用 jenkin Netlify 等自动部署的工具。了解以上，继续我们的话题。")]),t._v(" "),e("h2",{attrs:{id:"githooks-原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#githooks-原理","aria-hidden":"true"}},[t._v("#")]),t._v(" githooks 原理")]),t._v(" "),e("p",[t._v("git 为我们提供了 hook 机制，在执行 "),e("code",[t._v("git push")]),t._v("等命令后，根据不同的钩子函数，触发不同的脚本。脚本文件存放在"),e("code",[t._v(".git/hooks/")]),t._v("文件夹中。\n如果克隆一个项目，打开此文件夹可以看到一些主要的脚本例子。在这里我们只需要了解 post-receive 这个钩子，它将在 "),e("code",[t._v("git push")]),t._v("完成后触发。")]),t._v(" "),e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("需要注意的是：整个流程涉及 ssh登录， linux 权限最后才是githooks。一定要确认问题发生在哪一环节。")])]),t._v(" "),e("h2",{attrs:{id:"ssh-登录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ssh-登录","aria-hidden":"true"}},[t._v("#")]),t._v(" ssh 登录")]),t._v(" "),e("p",[t._v("在我们部署之前，首先要了解 ssh 的登录机制，因为这对免密登录至关重要。在初用 git 进行版本控制时，我们都是使用 https 进行登录。但是这样做的弊端是\n即使是项目的拥有者，也要每次输入账号密码。所以这里我们使用另一种登录的方式 ssh 登录。")]),t._v(" "),e("h3",{attrs:{id:"ssh-创建秘钥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ssh-创建秘钥","aria-hidden":"true"}},[t._v("#")]),t._v(" ssh 创建秘钥")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('ssh-keygen -t rsa -C "email@email.com"\n')])])]),e("p",[t._v("一般情况，我们不设置密码，使用默认路径存储秘钥，所以这里要连续敲三个回车。秘钥保存在：")]),t._v(" "),e("ul",[e("li",[t._v("window "),e("code",[t._v("C:\\Users\\Administrator\\.ssh")])]),t._v(" "),e("li",[t._v("linux "),e("code",[t._v("/root/.ssh")])]),t._v(" "),e("li",[t._v("mac 这里不做探讨。")])]),t._v(" "),e("p",[t._v("这里的秘钥 Client 和 Server 可以使用相同的公钥进行登录。")]),t._v(" "),e("h4",{attrs:{id:"ssh-公钥登录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ssh-公钥登录","aria-hidden":"true"}},[t._v("#")]),t._v(" ssh 公钥登录")]),t._v(" "),e("p",[t._v("生成客户端秘钥后，我们需要在仓库中能识别这个公钥，并且需要有一个类似于数据库的东西存储账号密码（公钥）。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ cd /home/git/\n$ mkdir .ssh\n$ touch .ssh/authorized_keys\n")])])]),e("p",[e("code",[t._v("authorized_keys")]),t._v("就相当于数据库，我们需要将生成的公钥（id_isa.pub）内容添加到此文件中。")]),t._v(" "),e("h3",{attrs:{id:"添加登录信任"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加登录信任","aria-hidden":"true"}},[t._v("#")]),t._v(" 添加登录信任")]),t._v(" "),e("p",[t._v("如果是首次登录，会出现 yes/no 的一个提示，但是我们通过客户端命令使用脚本执行，无法弹出这个提示，所以需要在 "),e("code",[t._v("/etc/ssh/ssh_config")]),t._v("文件设置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("Host *\nStrictHostKeyChecking yes\n")])])]),e("p",[t._v("默认选择 yes 。这个操作完成后，会自动在 "),e("code",[t._v("/home/git/.ssh")]),t._v(" 下生成 "),e("code",[t._v("known_hosts")]),t._v("信任列表。")]),t._v(" "),e("h2",{attrs:{id:"git-部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-部署","aria-hidden":"true"}},[t._v("#")]),t._v(" git 部署")]),t._v(" "),e("p",[t._v("我们所需要的环境有三个：")]),t._v(" "),e("ul",[e("li",[t._v("Client")]),t._v(" "),e("li",[t._v("Repository")]),t._v(" "),e("li",[t._v("Server")])]),t._v(" "),e("p",[t._v("部署前要确定已经安装了 git ，并且创建了 git 群组以及 git 用户。\nClient 是我们的客户端开发环境，Repository 是远程仓库，Server 是真正运行项目的地方。我的 Client 是 windows 系统。Repository 和 Server 位于同一 ip 下。\n我们将分别讲述这三个环境需要做哪些事。")]),t._v(" "),e("h3",{attrs:{id:"git-repository-部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-repository-部署","aria-hidden":"true"}},[t._v("#")]),t._v(" git Repository 部署")]),t._v(" "),e("p",[t._v("初始化 git 仓库。这里要注意区分 "),e("code",[t._v("git init --bare")]),t._v("与"),e("code",[t._v("git init")]),t._v(","),e("code",[t._v("git init --bare")]),t._v("相当于将仓库与代码分离，适合作为远程仓库。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git init --bare magix.git\n")])])]),e("h3",{attrs:{id:"git-client-clone"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-client-clone","aria-hidden":"true"}},[t._v("#")]),t._v(" git Client clone")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone git@ip:/usr/local/src/server/magix.git\n")])])]),e("h3",{attrs:{id:"git-server-clone"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-server-clone","aria-hidden":"true"}},[t._v("#")]),t._v(" git Server clone")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone /usr/local/src/server/magix.git\n")])])]),e("p",[t._v("Server 如果不小心也使用了 ip clone项目，会导致一直提示"),e("code",[t._v("Permission denied, please try again.")]),t._v("。如果是因为这个路径导致，可以修改\n"),e("code",[t._v("/当前项目/.git/config")]),t._v("\n修改前：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("url = git@server:/usr/local/src/xxx.git\n")])])]),e("p",[t._v("修改后：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("url = /usr/local/src/xxx.git\n")])])]),e("h2",{attrs:{id:"post-receive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#post-receive","aria-hidden":"true"}},[t._v("#")]),t._v(" post-receive")]),t._v(" "),e("p",[t._v("这里不进行赘述，只是使用了基本命令。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('#！ /bin/sh\nDeployPath="/usr.local/xxx"\ncd $DeployPath\necho "POST-RECEIVE"\nunset GIT_DIR # 去掉默认 git 环境变量\ngit pull\n')])])]),e("h2",{attrs:{id:"linux-权限管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-权限管理","aria-hidden":"true"}},[t._v("#")]),t._v(" linux 权限管理")]),t._v(" "),e("p",[t._v("完成以上，只是流程上看似畅通，但是一定会有各种各样的坑。这就是为什么我没有一步一步写出命令代码，而是分模块的讲述整个过程。完全照搬\n代码很难跑通，我们需要理解 linux 系统的一些基本使用，git 的基本使用，shell的运用。否则即使是特别简单的自动部署，也让人望而生畏。之前\n我们创建了git 群组与用户，这里我们需要将 ssh 、Repository 、Server 相应的文件夹及项目，所有者都改为 git 。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 如果是单个文件 去掉 -R\nchown -R git:git foldername\n")])])]),e("p",[t._v("并且 "),e("code",[t._v("post-receive")]),t._v(" , "),e("code",[t._v("/home/git/.ssh")]),t._v(" , "),e("code",[t._v("/home/git/.ssh/authorized_keys")]),t._v(" 需要分别赋予权限。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# 赋予可执行权限 755\nchmod +x ./post-receive\nchmod 755 .ssh\nchmod 644 .ssh/authorized_keys\n")])])]),e("p",[t._v("参考")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("-rw------- (600) -- 只有属主有读写权限。\n\n-rw-r--r-- (644) -- 只有属主有读写权限；而属组用户和其他用户只有读权限。\n\n-rwx------ (700) -- 只有属主有读、写、执行权限。\n\n-rwxr-xr-x (755) -- 属主有读、写、执行权限；而属组用户和其他用户只有读、执行权限。\n\n-rwx--x--x (711) -- 属主有读、写、执行权限；而属组用户和其他用户只有执行权限。\n\n-rw-rw-rw- (666) -- 所有用户都有文件读、写权限。这种做法不可取。\n\n-rwxrwxrwx (777) -- 所有用户都有读、写、执行权限。更不可取的做法。\n")])])])])}],!1,null,null,null);s.default=r.exports}}]);